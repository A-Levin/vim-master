"""Quest handlers for VimMaster bot."""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.core.services.game import game_service
from app.core.services.quest import quest_service
from app.core.services.user import user_service
from app.db.base import SessionLocal

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("quest"))
async def quest_handler(message: Message) -> None:
    """Handle /quest command - show available quests."""
    telegram_user = message.from_user
    if not telegram_user:
        return

    db = SessionLocal()
    try:
        user = user_service.get_user_by_telegram_id(db, telegram_user.id)
        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # Get next recommended quest
        next_quest = game_service.get_next_recommended_quest(db, user.id)

        if not next_quest:
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã!")
            return

        # Show quest info
        quest_text = f"""üéØ <b>–ö–≤–µ—Å—Ç: {next_quest.title}</b>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{next_quest.description}

<b>–¢–∏–ø:</b> {next_quest.quest_type.value.title()}
<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {next_quest.difficulty.value.title()}
<b>–ú–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤:</b> {next_quest.max_score}
{f"<b>–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b> {next_quest.time_limit} —Å–µ–∫" if next_quest.time_limit else ""}

<b>–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<code>{next_quest.initial_text or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>

<b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
<code>{next_quest.expected_result or '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É'}</code>

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéÆ –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç",
                        callback_data=f"start_quest:{next_quest.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí° –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É",
                        callback_data=f"hint:{next_quest.id}:0",
                    )
                ],
            ]
        )

        await message.answer(quest_text, parse_mode="HTML", reply_markup=keyboard)
    finally:
        db.close()


@router.callback_query(F.data.startswith("start_quest:"))
async def start_quest_callback(callback: CallbackQuery) -> None:
    """Handle start quest callback."""
    if not callback.data or not callback.from_user:
        return

    quest_id = int(callback.data.split(":")[1])

    db = SessionLocal()
    try:
        user = user_service.get_user_by_telegram_id(db, callback.from_user.id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        quest = game_service.start_quest(db, user, quest_id)
        if not quest:
            await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await callback.answer("–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É Vim –∫–æ–º–∞–Ω–¥—É.")

        # Set up quest state (in real app, you'd use FSM)
        start_text = f"""üéÆ <b>–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç: {quest.title}</b>

–í–≤–µ–¥–∏—Ç–µ Vim –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

<b>–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<code>{quest.initial_text or ''}</code>

<b>–¶–µ–ª—å:</b>
<code>{quest.expected_result or '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É'}</code>

<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...</i>"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint:{quest.id}:0"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_quest:{quest.id}"
                    )
                ],
            ]
        )

        if callback.message:
            await callback.message.edit_text(
                start_text, parse_mode="HTML", reply_markup=keyboard
            )

    finally:
        db.close()


@router.callback_query(F.data.startswith("hint:"))
async def hint_callback(callback: CallbackQuery) -> None:
    """Handle hint request callback."""
    if not callback.data or not callback.from_user:
        return

    parts = callback.data.split(":")
    quest_id = int(parts[1])
    hints_used = int(parts[2])

    db = SessionLocal()
    try:
        quest = quest_service.get_quest_by_id(db, quest_id)
        if not quest:
            await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        hint = game_service.get_quest_hints(quest, hints_used)
        if not hint:
            await callback.answer("–ë–æ–ª—å—à–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç!")
            return

        hint_text = f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞ {hints_used + 1}:</b>\n{hint}"

        # Update keyboard with next hint button
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí° –ï—â–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞",
                        callback_data=f"hint:{quest_id}:{hints_used + 1}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_quest:{quest_id}"
                    )
                ],
            ]
        )

        await callback.answer()
        await callback.message.answer(hint_text, parse_mode="HTML")

    finally:
        db.close()


@router.message(
    F.text.startswith(":") | F.text.startswith(".") | F.text.startswith("g")
)
async def quest_answer_handler(message: Message) -> None:
    """Handle potential quest answer (Vim command)."""
    telegram_user = message.from_user
    if not telegram_user or not message.text:
        return

    db = SessionLocal()
    try:
        user = user_service.get_user_by_telegram_id(db, telegram_user.id)
        if not user:
            return

        # Get the next recommended quest (simplified - in real app use FSM)
        next_quest = game_service.get_next_recommended_quest(db, user.id)
        if not next_quest:
            return

        # Submit answer
        is_correct, score, result_message = game_service.submit_answer(
            db, user, next_quest.id, message.text
        )

        if is_correct:
            success_text = f"""‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

{result_message}

<b>–ö–æ–º–∞–Ω–¥–∞:</b> <code>{message.text}</code>
<b>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:</b> {score}

üéâ –ö–≤–µ—Å—Ç "{next_quest.title}" –∑–∞–≤–µ—Ä—à–µ–Ω!"""

            # Show next quest button
            next_quest_after = game_service.get_next_recommended_quest(db, user.id)
            if next_quest_after:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∫–≤–µ—Å—Ç",
                                callback_data=f"start_quest:{next_quest_after.id}",
                            )
                        ]
                    ]
                )
                await message.answer(
                    success_text, parse_mode="HTML", reply_markup=keyboard
                )
            else:
                await message.answer(
                    success_text + "\n\nüèÜ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã!",
                    parse_mode="HTML",
                )
        else:
            failure_text = f"""‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>

{result_message}

<b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b> <code>{message.text}</code>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint:{next_quest.id}:0"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data=f"start_quest:{next_quest.id}",
                        )
                    ],
                ]
            )

            await message.answer(failure_text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        db.close()


@router.callback_query(F.data.startswith("cancel_quest:"))
async def cancel_quest_callback(callback: CallbackQuery) -> None:
    """Handle quest cancellation."""
    await callback.answer("–ö–≤–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    if callback.message:
        await callback.message.edit_text(
            "–ö–≤–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞."
        )
